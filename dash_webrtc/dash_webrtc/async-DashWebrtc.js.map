{"version":3,"file":"async-DashWebrtc.js","mappings":"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","sources":["webpack:///./src/lib/models/connectionStatus.js","webpack:///./src/lib/utils/logger.js","webpack:///./src/lib/services/SignalingWsClient.js","webpack:///./src/lib/fragments/DashWebrtc.react.js"],"sourcesContent":["/**\r\n * Énumération des statuts de connexion pour le composant WebRTC\r\n */\r\nconst ConnectionStatus = {\r\n\tNEW: 'new',\r\n\tCONNECTING: 'connecting',\r\n\tCONNECTED: 'connected',\r\n\tFAILED: 'failed',\r\n\tCLOSED: 'closed',\r\n  };\r\n  \r\n  export default ConnectionStatus;\r\n  ","/*\r\n * Conditional logging method that only logs if the 'debug' prop is set to true.\r\n * @param {string} componentName - Name of the component\r\n * @param {boolean} debugMode - Enable debug mode\r\n * @returns {object} - Logger object with log method\r\n * @example\r\n * const logger = logger('MyComponent', true);\r\n * logger.log('info', 'This is an info message', { data: 'some data' });\r\n * logger.log('warn', 'This is a warning message', { data: 'some data' });\r\n * logger.log('error', 'This is an error message', { data: 'some data' });\r\n */\r\nexport default function logger(componentName, debugMode = false) {\r\n\treturn {\r\n\t\tlog: (level = 'log', message, data) => {\r\n\t\t\t// Helper function for actual logging\r\n\t\t\tconst doLog = (level, message, data) => {\r\n\t\t\t\tconst logFn = console[level] || console.log;\r\n\t\t\t\tconst prefix = `[${componentName}] ${new Date().toISOString().slice(11, 23)} -`;\r\n\t\t\t\tif (data) {\r\n\t\t\t\t\tlogFn(prefix, message, data);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tlogFn(prefix, message);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\t// Log only if debug mode is enabled\r\n\t\t\tif (debugMode) {\r\n\t\t\t\tdoLog(level, message, data);\r\n\t\t\t} else if (level === 'error') {\r\n\t\t\t\tdoLog(level, message, data);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}","import logger from \"../utils/logger\";\r\n\r\nexport default class SignalingWsClient {\r\n\r\n\tconstructor(url, protocols = \"json\", debugMode = false, maxRetries = 3, retryInterval = 1000, openingMessage = null) {\r\n\t\t// Set the class properties\r\n\t\tthis.url = url;\r\n\t\tthis.debugMode = debugMode;\r\n\t\tthis.maxRetries = maxRetries;\r\n\t\tthis.retryInterval = retryInterval;\r\n\t\tthis.openingMessage = openingMessage;\r\n\t\t// Add logger to the class\r\n\t\tthis.logger = logger(\"SignalingWsClient\", debugMode);\r\n\t\tthis.ws = null;\r\n\t\tthis.connectionStatus = null;\r\n\t\tthis.onMessage = null;\r\n\t\tthis.onConnectionStatusChange = null;\r\n\t}\r\n\r\n\tasync connect() {\r\n\t\tlet retries = 0;\r\n\r\n\t\t// Attempt to create a new WebSocket connection\r\n\t\tconst attemptConnection = async () => {\r\n\t\t\tthis.logger.log(\"info\", \"Attempting to connect to WebSocket server\", { url: this.url });\r\n\t\t\ttry {\r\n\t\t\t\t// Create a new WebSocket connection\r\n\t\t\t\treturn await new Promise((resolve, reject) => {\r\n\t\t\t\t\tconst ws = new WebSocket(this.url);\r\n\t\t\t\t\tthis.connectionStatus = \"CONNECTING\";\r\n\t\t\t\t\tif (this.onConnectionStatusChange) {\r\n\t\t\t\t\t\tthis.onConnectionStatusChange(this.connectionStatus);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.logger.log(\"info\", \"WebSocket connection in progress\");\r\n\t\t\t\t\t// If the connection is on open, resolve the promise and return the connection\r\n\t\t\t\t\tws.onopen = () => {\r\n\t\t\t\t\t\tthis.logger.log(\"info\", \"WebSocket connection established\");\r\n\t\t\t\t\t\tthis.connectionStatus = \"CONNECTED\";\r\n\t\t\t\t\t\tif (this.onConnectionStatusChange) {\r\n\t\t\t\t\t\t\tthis.onConnectionStatusChange(this.connectionStatus);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tthis.ws = ws;\r\n\r\n\t\t\t\t\t\t// Send the opening message\r\n\t\t\t\t\t\tif (this.openingMessage) {\r\n\t\t\t\t\t\t\tthis.logger.log(\"info\", \"Sending opening message\");\r\n\t\t\t\t\t\t\tthis.send(this.openingMessage);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t// Setup event listeners\r\n\t\t\t\t\t\tthis._setupEventListeners(ws);\r\n\t\t\t\t\t\tresolve(ws);\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\t// If the connection is closed, reject the promise\r\n\t\t\t\t\tws.onerror = (error) => reject(error);\r\n\r\n\t\t\t\t\t// Timeout for connection\r\n\t\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\t\tif (ws.readyState !== WebSocket.OPEN) {\r\n\t\t\t\t\t\t\tws.close();\r\n\t\t\t\t\t\t\tthis.connectionStatus = \"FAILED\";\r\n\t\t\t\t\t\t\tif (this.onConnectionStatusChange) {\r\n\t\t\t\t\t\t\t\tthis.onConnectionStatusChange(this.connectionStatus);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\treject(new Error(\"Connection timeout\"));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, 3000);\r\n\t\t\t\t});\r\n\t\t\t} catch (error) {\r\n\t\t\t\t// If the connection fails, retry until the maximum number of retries is reached\r\n\t\t\t\t// or throw an error if the maximum number of retries is reached\r\n\t\t\t\tif (retries >= this.maxRetries) {\r\n\t\t\t\t\tthrow new Error(`Failed to connect after ${retries} attempts: ${error.message}`);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.logger.log(\"warn\", `Failed to connect: ${error.message}. Retrying in ${this.retryInterval}ms`);\r\n\t\t\t\t\tretries++;\r\n\t\t\t\t\tawait new Promise((resolve) => setTimeout(resolve, this.retryInterval));\r\n\t\t\t\t\treturn attemptConnection();\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t};\r\n\t\t\r\n\t\treturn attemptConnection();\r\n\t}\r\n\r\n\t_setupEventListeners(ws) {\r\n\t\tws.onmessage = (event) => {\r\n\t\t\tthis.logger.log(\"info\", \"Received message\", { event });\r\n\t\t\tif (this.onMessage) {\r\n\t\t\t\tthis.onMessage(JSON.parse(event.data));\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tws.onclose = (event) => {\r\n\t\t\tthis.logger.log(\"info\", \"WebSocket connection closed\", { event });\r\n\t\t\tthis.connectionStatus = \"CLOSED\";\r\n\t\t\tif (this.onConnectionStatusChange) {\r\n\t\t\t\tthis.onConnectionStatusChange(this.connectionStatus);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tws.onerror = (event) => {\r\n\t\t\tthis.logger.log(\"error\", \"WebSocket connection error\", { event });\r\n\t\t\tthis.connectionStatus = \"FAILED\";\r\n\t\t\tif (this.onConnectionStatusChange) {\r\n\t\t\t\tthis.onConnectionStatusChange(this.connectionStatus);\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\r\n\tsend(message) {\r\n\t\tif (this.ws && this.ws.readyState === WebSocket.OPEN) {\r\n\t\t\tconst data = typeof message === \"object\" ? JSON.stringify(message) : message;\r\n\t\t\tthis.ws.send(data);\r\n\t\t\tthis.logger.log(\"info\", \"Sending message\", message);\r\n\t\t} else {\r\n\t\t\tthis.logger.log(\"warn\", \"WebSocket connection is not open. Cannot send message\", { message });\r\n\t\t}\r\n\t}\r\n\r\n\tclose() {\r\n\t\tif (this.ws) {\r\n\t\t\t// Preparing to close the connection\r\n\t\t\tthis.logger.log(\"info\", \"Closing WebSocket connection\");\r\n\t\t\tthis.connectionStatus = \"CLOSING\";\r\n\t\t\tif (this.onConnectionStatusChange) {\r\n\t\t\t\tthis.onConnectionStatusChange(this.connectionStatus);\r\n\t\t\t}\r\n\r\n\t\t\t// Close the connection\r\n\t\t\tthis.ws.close();\r\n\t\t\tthis.logger.log(\"info\", \"WebSocket connection closed\");\r\n\t\t\tthis.connectionStatus = \"CLOSED\";\r\n\t\t\tif (this.onConnectionStatusChange) {\r\n\t\t\t\tthis.onConnectionStatusChange(this.connectionStatus);\r\n\t\t\t}\r\n\r\n\t\t\t// Reset the class properties\r\n\t\t\tthis.url = null;\r\n\t\t\tthis.ws = null;\r\n\t\t\tthis.onConnectionStatusChange = null;\r\n\t\t\tthis.onMessage = null;\r\n\t\t}\r\n\t}\r\n\r\n\t\t\r\n}\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ConnectionStatus from '../models/connectionStatus';\r\nimport logger from '../utils/logger';\r\nimport SignalingWsClient from '../services/SignalingWsClient';\r\n\r\n/**\r\n * ExampleComponent is an example component.\r\n * It takes a property, `label`, and\r\n * displays it.\r\n * It renders an input with the property `value`\r\n * which is editable by the user.\r\n */\r\nexport default class DashWebrtc extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        // Ice configuration for WebRTC connection (STUN/TURN servers)\r\n        this.iceConfig = this.props.iceServersConfig || {\r\n            iceServers: [\r\n                // STUN servers\r\n                { urls: 'stun:stun.l.google.com:19302' },\r\n                { urls: 'stun:stun1.l.google.com:19302' },\r\n                // TURN servers\r\n                {\r\n                    urls: 'turn:openrelay.metered.ca:80',\r\n                    username: 'openrelayproject',\r\n                    credential: 'openrelayproject'\r\n                }\r\n            ],\r\n            iceCandidatePoolSize: 10, // Number of ICE candidates to gather before sending an offer\r\n            iceTransportPolicy: 'all' // 'relay' for TURN only, 'all' for both STUN and TURN\r\n        };\r\n\r\n        // Init RTRCPeerConnection\r\n        this.pc = new RTCPeerConnection(this.iceConfig);\r\n        // Add event handlers for the RTCPeerConnection object\r\n        this.pc.onicecandidate = this.handleIceCandidate.bind(this); // ICE candidate event handler\r\n        this.pc.onconnectionstatechange = this.handleConnectionStateChange.bind(this); // Connection state event handler\r\n        this.pc.onnegotiationneeded = this.handleNegotiationNeeded.bind(this); // Negotiation needed event handler\r\n        this.pc.ontrack = this.handleAddTrack.bind(this); // Track added event handler\r\n        this.pc.onicegatheringstatechange = this.handleIceGatheringStateChange.bind(this); // ICE gathering state event handler\r\n\r\n        // Init Signaling WebSocket client & connect\r\n        this.signalingClient = new SignalingWsClient(\r\n            this.props.signalingUrl,              // Signaling server URL\r\n            this.props.signalingServerProtocols,        // Signaling server protocols\r\n            this.props.debug,                           // Debug mode\r\n            this.props.signalingServerMaxRetries,       // Max retries\r\n            this.props.signalingServerRetryInterval,    // Retry interval\r\n            this.props.signalingServerOpeningMessage    // Opening message to send, on websocket connection\r\n        )\r\n        this.signalingClient.onConnectionStatusChange = this.handleSignalingConnectionStatusChange.bind(this);\r\n        this.signalingClient.onMessage = this.handleSignalingMessage.bind(this);\r\n\r\n        // Init logger\r\n        this.logger = logger('DashWebrtc', this.props.debug);\r\n\r\n        // 'this.state' is a special property that is built into all React components\r\n        // It is part of the component's state management system.\r\n        // When the state of a component changes, the component will automatically re-render.\r\n        this.state = {\r\n            status: ConnectionStatus.CLOSED, // Initial status\r\n            error: null, // No error initially\r\n        };\r\n\r\n        // Variables to store incoming and outgoing media streams\r\n        this.incomingMediaStreams = new Map();\r\n        this.outgoingMediaStreams = null;\r\n\r\n        // Variable to indicate if an offer is being madee\r\n        this.makingOffer = false;\r\n\r\n        // Variable to indicate that the offer should be ignored because an offer is already in progress\r\n        this.ignoreIncomingOffer = false;\r\n\r\n        // Variable to indicate if the remote offer configuration is in progress\r\n        this.isSettingRemoteAnswerPending = false;\r\n\r\n        // Variable to indicate the politeness mode\r\n        this.polite = this.props.polite || null;\r\n\r\n    }\r\n\r\n    // ============================== Signaling Client - Event Handlers ==============================\r\n\r\n    async handleSignalingMessage(message) {\r\n        try {\r\n            // Check if the RTCPeerConnection is available\r\n            if (!this.pc) {\r\n                return;\r\n            }\r\n\r\n            const { description, candidate, role } = message; // Destructure the message object\r\n\r\n            // Check if the message contains a description or a candidate\r\n            if (description) {\r\n                this.logger.log('log', 'Received description signaling message:', description);\r\n\r\n                // Check if we are ready to process an offer\r\n                // If the signaling state is 'stable' or we are waiting for a remote answer, we are ready\r\n                const readyForOffer =\r\n                    !this.makingOffer &&\r\n                    (this.pc.signalingState === \"stable\" || this.isSettingRemoteAnswerPending);\r\n\r\n                // An offer collision occurs when an offer is received while we are still processing an offer\r\n                const offerCollision = description.type === \"offer\" && !readyForOffer;\r\n\r\n                // Check if we are in polite mode\r\n                if (!this.polite || !typeof this.polite === 'boolean') {\r\n                    throw new Error('Invalid politeness mode. Must be a boolean value. This property is required. Should be set by the user or the signaling server.');\r\n                }\r\n\r\n                // If we are the sender (polite = false), we are impolite and will ignore incoming offers\r\n                this.ignoreIncomingOffer = !this.polite && offerCollision;\r\n                if (this.ignoreIncomingOffer) {\r\n                    return; // Ignore the offer and wait for the next one\r\n                }\r\n\r\n                // Apply the remote description (offer or answer)\r\n                // For an answer, we mark that we are configuring it\r\n                this.isSettingRemoteAnswerPending = description.type === \"answer\";\r\n                await this.pc.setRemoteDescription(description);\r\n                this.isSettingRemoteAnswerPending = false;\r\n\r\n                // If we received an offer, create an answer\r\n                if (description.type === \"offer\") {\r\n                    await this.pc.setLocalDescription();\r\n\r\n                    // Send the answer to the remote peer\r\n                    this.logger.log('log', 'Sending answer to remote peer:', this.pc.localDescription);\r\n                    this.signalingClient.send({ description: this.pc.localDescription });\r\n                }\r\n                // Handle ICE\r\n            } else if (candidate) {\r\n                this.logger.log('log', 'Received candidate signaling message:', candidate);\r\n                try {\r\n                    await this.pc.addIceCandidate(candidate);\r\n                } catch (err) {\r\n                    if (!this.ignoreIncomingOffer) {\r\n                        throw err;\r\n                    }\r\n                }\r\n            } else if (role) {\r\n                const { polite } = role;\r\n                if (!polite) {\r\n                    this.logger.log('warn', 'Invalid role signaling message. No `polite` found :', message);\r\n                } else if (!typeof polite === 'boolean') {\r\n                    this.logger.log('warn', 'Invalid role signaling message. `polite` must be a boolean :', message);\r\n                } else {\r\n                    this.polite = polite;\r\n                    this.logger.log('log', 'Politeness mode updated:', this.polite);\r\n                }\r\n            } else {\r\n                this.logger.log('warn', 'Invalid signaling message. No `description` or `candidate` found:', message);\r\n            }\r\n        } catch (err) {\r\n            this.logger.log('error', 'Error handling signaling message:', err);\r\n            this.setState({\r\n                status: ConnectionStatus.ERROR,\r\n                error: `Signaling error: ${err.message}`\r\n            });\r\n        }\r\n    }\r\n\r\n    handleSignalingConnectionStatusChange(status) {\r\n        this.logger.log('log', 'Signaling connection status:', status);\r\n    }\r\n\r\n    // ============================== RTCPeerConnection - Event Handlers ==============================\r\n\r\n\r\n    /**\r\n     * Handle ICE candidate events.\r\n     * @param {RTCPeerConnectionIceEvent} event - ICE candidate event\r\n     * @returns {void}\r\n     */\r\n    handleIceCandidate(event) {\r\n        this.logger.log('log', 'handleIceCandidate event:', event);\r\n        this.signalingClient.send({ candidate: event.candidate });\r\n    }\r\n\r\n    /**\r\n     * Handle connection state changes.\r\n     * @param {Event} event - Connection state change event\r\n     * @returns {void}\r\n     */\r\n    handleConnectionStateChange(event) {\r\n        if (!this.pc) {\r\n            return;\r\n        }\r\n        const state = this.pc.connectionState;\r\n        this.logger.log('log', 'RTCPeerConnection state:', state);\r\n\r\n        switch (state) {\r\n            case 'new':\r\n                this.setState({\r\n                    status: ConnectionStatus.NEW\r\n                });\r\n                break;\r\n            case 'connecting':\r\n                this.setState({\r\n                    status: ConnectionStatus.CONNECTING\r\n                });\r\n                break;\r\n            case 'connected':\r\n                this.setState({\r\n                    status: ConnectionStatus.CONNECTED\r\n                });\r\n                break;\r\n            case 'failed':\r\n                this.setState({\r\n                    status: ConnectionStatus.FAILED\r\n                });\r\n                break;\r\n            case 'closed':\r\n                this.setState({\r\n                    status: ConnectionStatus.CLOSED\r\n                });\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle the 'negotiationneeded' event.\r\n     * This event is triggered when the RTCPeerConnection needs to create an offer. \r\n     * Here it will always create an offer, because the negotiationneeded event is triggered when the RTCPeerConnection is in the 'stable' state.\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Perfect_negotiation#handling_the_negotiationneeded_event}\r\n     * @param {Event} event - Negotiation needed event\r\n     * @returns {void}\r\n     * @async\r\n     * @private\r\n     */\r\n    async handleNegotiationNeeded(event) {\r\n        // Check if the RTCPeerConnection is available\r\n        if (!this.pc) {\r\n            return;\r\n        }\r\n\r\n        this.logger.log('log', 'handleNegotiationNeeded event:', event);\r\n        try {\r\n            this.makingOffer = true;\r\n            // seltLocalDescription : Crée automatiquement une offre ou une réponse en fonction de l'état actuel de la connexion (signalingState)\r\n            await this.pc.setLocalDescription()\r\n            // Send the offer to the remote peer\r\n            this.logger.log('log', 'Sending offer to remote peer:', this.pc.localDescription);\r\n            this.signalingClient.send({ description: this.pc.localDescription });\r\n        }\r\n        catch (error) {\r\n            this.logger.log('error', 'Error during negotiation:', error);\r\n            this.setState({\r\n                status: ConnectionStatus.FAILED,\r\n                error: `Error during negotiation: ${error.message}`\r\n            });\r\n        } finally {\r\n            this.makingOffer = false;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Handle ICE gathering state changes.\r\n     * warn: This method implement the non-trickle ICE technique.\r\n     * This approach waits for all ICE candidates to be collected before sending the complete offer.\r\n     * This avoids sending each ICE candidate individually via the 'onicecandidate' event, which is problematic with Dash's setProps because:\r\n     * 1. Multiple candidates arrive in rapid succession\r\n     * 2. React/Dash updates are too slow to process each candidate\r\n     * 3. Successive setProps calls overwrite previous candidates\r\n     * This technique ensures all candidates are included in the SDP offer in a single message.\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Perfect_negotiation#handling_ice_gathering_state_changes}\r\n     * @see {@link https://datatracker.ietf.org/doc/html/draft-ietf-mmusic-trickle-ice-02#section-1}\r\n     * @param {Event} event - ICE gathering state change event\r\n     * @returns {void}\r\n     * @private\r\n     */\r\n    handleIceGatheringStateChange(event) {\r\n        // Check if the RTCPeerConnection is available\r\n        if (!this.pc) {\r\n            return;\r\n        }\r\n\r\n        // Get the current ICE gathering state\r\n        const state = this.pc.iceGatheringState;\r\n        this.logger.log('log', 'IceGathering state:', state);\r\n\r\n        // Handle the ICE gathering state\r\n        switch (state) {\r\n            case 'new':\r\n                break;\r\n            case 'gathering':\r\n                break;\r\n            // When ICE gathering is complete, send the full offer with all candidates\r\n            case 'complete':\r\n                // if (this.pc.localDescription && this.props.polite === 'sender') {\r\n                //     this.logger.log('log', 'ICE gathering complete, sending full offer with all candidates', this.pc.localDescription);\r\n                //     if (this.props.setProps) {\r\n                //         this.props.setProps({\r\n                //             outgoingSignalingMessage: { description: this.pc.localDescription }\r\n                //         });\r\n                //     }\r\n                // } else {\r\n                //     this.logger.log('log', 'ICE gathering complete, waiting for offer', this.pc.localDescription);\r\n                // }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle the addition of a new track to the RTCPeerConnection. \r\n     * @param {RTCTrackEvent} event - Track event\r\n     * @returns {void}\r\n     * @private\r\n     */\r\n    handleAddTrack(event) {\r\n        const { track, streams } = event;\r\n\r\n        this.logger.log('log', `Received track: ${track.id}, kind: ${track.kind}`);\r\n        this.logger.log('log', `Streams received with track: ${streams.length}`);\r\n\r\n        try {\r\n            // Check if there are any streams\r\n            if (!streams || streams.length === 0) {\r\n                this.logger.log('warn', 'No streams found for the track:', track.kind);\r\n                return;\r\n            }\r\n\r\n            this.logger.log('log', `First stream ID: ${streams[0].id}, track count: ${streams[0].getTracks().length}`);\r\n\r\n            // Wait for the track to become active (unmute) before adding it to the media element\r\n            track.onunmute = () => {\r\n                this.logger.log('log', `Track is unmuted: ${track.kind}, id: ${track.id}`);\r\n                this.connectStreamsToElements(streams[0], this.props.incomingMediaElementsId);\r\n            };\r\n\r\n        } catch (error) {\r\n            this.logger.log('error', 'Error handling new track:', error);\r\n\r\n            // Mettre a jour l'état avec l'erreur\r\n            this.setState({\r\n                status: ConnectionStatus.ERROR,\r\n                error: `Error handling new track: ${error.message}`\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Connect incoming media streams to HTML media elements.\r\n     * @param {Array} elementsId - Array of HTML media element IDs\r\n     * @returns {void}\r\n     * @private\r\n     */\r\n    connectStreamsToElements(mediaStream, elementsId) {\r\n        if (!mediaStream || !elementsId) {\r\n            this.logger.log('warn', 'No incoming media streams or element IDs to connect');\r\n            return;\r\n        }\r\n\r\n        try {\r\n            // Get the audio and video tracks\r\n            const audioTracks = mediaStream.getAudioTracks();\r\n            if (audioTracks.length > 1) {\r\n                this.logger.log('warn', 'Multiple audio tracks found. Only the first one will be used.');\r\n            }\r\n\r\n            const videoTracks = mediaStream.getVideoTracks();\r\n            if (videoTracks.length > 1) {\r\n                this.logger.log('warn', 'Multiple video tracks found. Separate them into different streams.');\r\n            }\r\n\r\n            // Limit to the number of available elements\r\n            let elementIndex = 0;\r\n            // Create a new MediaStream with the video track\r\n            videoTracks.forEach((track) => {\r\n                // Create a new MediaStream for the track\r\n                this.incomingMediaStreams.set(elementIndex, new MediaStream());\r\n\r\n                // Add the track to the stream\r\n                this.incomingMediaStreams.get(elementIndex).addTrack(track);\r\n            });\r\n\r\n            // Connect the tracks to the media elements\r\n            let isFirst = true;\r\n            elementIndex = 0\r\n            audioTracks.forEach((track) => {\r\n                if (!this.incomingMediaStreams.get(elementIndex)) {\r\n                    this.incomingMediaStreams.set(elementIndex, new MediaStream());\r\n                }\r\n\r\n                // Add the audio track if it's the first video track\r\n                if (isFirst && audioTracks.length > elementIndex) {\r\n                    this.incomingMediaStreams.get(elementIndex).addTrack(track);\r\n                    isFirst = false;\r\n                } else if (!isFirst) {\r\n                    this.logger.log('warn', 'Multiple audio tracks found. This implementation only supports one audio track.');\r\n                }\r\n            });\r\n\r\n            // Check if there are more streams than elements\r\n            if (this.incomingMediaStreams.size > elementsId.length) {\r\n                this.logger.log('warn', 'Not enough media elements to connect all tracks');\r\n            }\r\n\r\n            // Connect the streams to the elements\r\n            elementsId.forEach((id, index) => {\r\n                if (document.getElementById(id)) {\r\n                    const mediaElement = document.getElementById(id);\r\n                    mediaElement.srcObject = this.incomingMediaStreams.get(index);\r\n                    this.logger.log('log', `Media element ${id} connected to stream:`, this.incomingMediaStreams.get(index));\r\n                }\r\n            });\r\n\r\n        } catch (error) {\r\n            this.logger.log('error', `Error connecting stream ${mediaStream.id} to element:`, error);\r\n        }\r\n    };\r\n\r\n\r\n    /**\r\n     * Disconnect incoming media streams from HTML media elements.\r\n     * @param {Array} elementsId - Array of HTML media element IDs\r\n     * @returns {void}\r\n     * @private\r\n     */\r\n    disconnectStreamsToElements(elementsId) {\r\n        console.log('disconnectStreamsToElements', elementsId);\r\n\r\n        // If no incoming media streams or elements are specified, return\r\n        if (!elementsId) {\r\n            this.logger.log('warn', 'No incoming media elements to disconnect');\r\n            return;\r\n        }\r\n\r\n        // Disconnect the media streams from the elements\r\n        elementsId.forEach(id => {\r\n            if (document.getElementById(id)) {\r\n                const mediaElement = document.getElementById(id);\r\n                // Stop the media element\r\n                if (mediaElement.srcObject) {\r\n                    mediaElement.pause();\r\n                }\r\n\r\n                // Disconnect the stream\r\n                mediaElement.srcObject = null;\r\n                this.logger.log('log', 'Media element disconnected:', id);\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    /**\r\n     * Validate constraints for media devices. \r\n     * @private\r\n     */\r\n    validateContraints() {\r\n        // Validate and set default constraints if needed\r\n        const constraints = this.props.mediaDevicesConstraints;\r\n\r\n        console.log('validateContraints', constraints);\r\n\r\n        // Validate that at least one media type is requested\r\n        if (!constraints.audio && !constraints.video) {\r\n            throw new Error('At least one media type must be requested. Modify the `mediaDevicesConstraints` prop.');\r\n        }\r\n\r\n        // Validate constraint format\r\n        if (constraints.audio && typeof constraints.audio !== 'boolean' && typeof constraints.audio !== 'object') {\r\n            throw new Error('Invalid audio constraints format. Modify the `mediaDevicesConstraints` prop.');\r\n        }\r\n        if (constraints.video && typeof constraints.video !== 'boolean' && typeof constraints.video !== 'object') {\r\n            throw new Error('Invalid video constraints format. Modify the `mediaDevicesConstraints` prop.');\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Updates the outgoing media stream when constraints change.\r\n    * Handles multiple tracks per media type and ensures proper track replacement.\r\n    * @returns {Promise<void>}\r\n    * @async\r\n    * @private\r\n    */\r\n    async updateOutgoingMediaStreams() {\r\n        try {\r\n            // Validate constraints\r\n            this.validateContraints();\r\n\r\n            // Get a new media stream with the updated constraints\r\n            const newStream = await navigator.mediaDevices.getUserMedia(this.props.mediaDevicesConstraints);\r\n\r\n            // Store previous tracks for cleanup\r\n            const previousTracks = this.outgoingMediaStreams?.getTracks() || [];\r\n\r\n            // Get all tracks from the new stream\r\n            const newVideoTracks = newStream.getVideoTracks();\r\n            const newAudioTracks = newStream.getAudioTracks();\r\n\r\n            this.logger.log('log', `New media stream acquired: ${newVideoTracks.length} video tracks, ${newAudioTracks.length} audio tracks`);\r\n\r\n            if (!this.pc) {\r\n                this.logger.log('warn', 'No RTCPeerConnection available for track update');\r\n                return;\r\n            }\r\n\r\n            // Get all current senders\r\n            const senders = this.pc.getSenders();\r\n\r\n            // Create tracking arrays for replaced tracks\r\n            const replacedVideoTracks = [];\r\n            const replacedAudioTracks = [];\r\n\r\n            // First pass: replace existing tracks where possible\r\n            for (const sender of senders) {\r\n                if (!sender.track) continue;\r\n\r\n                if (sender.track.kind === 'video' && newVideoTracks.length > 0) {\r\n                    // Find a video track that hasn't been used yet\r\n                    const unusedTrack = newVideoTracks.find(track =>\r\n                        !replacedVideoTracks.includes(track.id));\r\n\r\n                    if (unusedTrack) {\r\n                        this.logger.log('log', `Replacing video track ${sender.track.id} with ${unusedTrack.id}`);\r\n                        await sender.replaceTrack(unusedTrack);\r\n                        replacedVideoTracks.push(unusedTrack.id);\r\n                    }\r\n                }\r\n                else if (sender.track.kind === 'audio' && newAudioTracks.length > 0) {\r\n                    // Find an audio track that hasn't been used yet\r\n                    const unusedTrack = newAudioTracks.find(track =>\r\n                        !replacedAudioTracks.includes(track.id));\r\n\r\n                    if (unusedTrack) {\r\n                        this.logger.log('log', `Replacing audio track ${sender.track.id} with ${unusedTrack.id}`);\r\n                        await sender.replaceTrack(unusedTrack);\r\n                        replacedAudioTracks.push(unusedTrack.id);\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Second pass: add any new tracks that weren't used as replacements\r\n            for (const track of newVideoTracks) {\r\n                if (!replacedVideoTracks.includes(track.id)) {\r\n                    this.logger.log('log', `Adding new video track: ${track.id}`);\r\n                    this.pc.addTrack(track, newStream);\r\n                }\r\n            }\r\n\r\n            for (const track of newAudioTracks) {\r\n                if (!replacedAudioTracks.includes(track.id)) {\r\n                    this.logger.log('log', `Adding new audio track: ${track.id}`);\r\n                    this.pc.addTrack(track, newStream);\r\n                }\r\n            }\r\n\r\n            // Update the outgoing media streams reference\r\n            this.outgoingMediaStreams = newStream;\r\n\r\n            // Set the media stream to the outgoing media element\r\n            this.connectStreamsToElements(this.outgoingMediaStreams, this.props.outgoingMediaElementsId);\r\n\r\n            // Stop and remove previous tracks\r\n            for (const track of previousTracks) {\r\n                track.stop();\r\n            }\r\n        } catch (error) {\r\n            this.logger.log('error', 'Error updating media stream:', error);\r\n            this.setState({\r\n                status: ConnectionStatus.ERROR,\r\n                error: `Error updating media stream: ${error.message}`\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    async addMediaTracksToPeerConnection() {\r\n        try {\r\n            // Get the available media devices\r\n            this.outgoingMediaStreams = await navigator.mediaDevices.getUserMedia(this.props.mediaDevicesConstraints);\r\n            this.logger.log('log', 'Media devices enumerated:', this.outgoingMediaStreams);\r\n            // Add the tracks to the peer connection\r\n            if (this.outgoingMediaStreams) {\r\n                for (const track of this.outgoingMediaStreams.getTracks()) {\r\n                    this.logger.log('log', 'Adding track to connection:', track.kind, track.id);\r\n                    this.pc.addTrack(track, this.outgoingMediaStreams);\r\n                }\r\n            } else {\r\n                this.logger.log('warn', 'No media devices available');\r\n            }\r\n        } catch (error) {\r\n            this.logger.log('error', 'Error adding media tracks to peer connection:', error);\r\n            this.setState({\r\n                status: ConnectionStatus.ERROR,\r\n                error: `Error adding media tracks to peer connection: ${error.message}`\r\n            });\r\n        }\r\n    }\r\n\r\n    // Méthode pour se connecter au serveur de signalisation\r\n    async connectToSignalingServer() {\r\n        try {\r\n            if (!this.signalingClient) {\r\n                throw new Error('SignalingClient is not initialized');\r\n            }\r\n\r\n            this.logger.log('log', 'Connecting to signaling server...');\r\n            await this.signalingClient.connect();\r\n\r\n        } catch (error) {\r\n            this.logger.log('error', 'Connection to signaling server failed:', error);\r\n            this.setState({\r\n                status: ConnectionStatus.ERROR,\r\n                error: `Connection to signaling server failed: ${error.message}`\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Start the WebRTC connection.\r\n     * @returns {Promise<void>}\r\n     * @async\r\n     * @private\r\n     */\r\n    async start() {\r\n        try {\r\n            // Validate media constraints \r\n            this.validateContraints();\r\n\r\n            // Get the available media devices and add the tracks to the peer connection  \r\n            await this.addMediaTracksToPeerConnection();\r\n\r\n            // Set the media stream to the outgoing media element\r\n            this.connectStreamsToElements(this.outgoingMediaStreams, this.props.outgoingMediaElementsId);\r\n\r\n        } catch (error) {\r\n            this.logger.log('error', 'Error starting WebRTC:', error);\r\n\r\n            // Mettre a jour l'état avec l'erreur\r\n            this.setState({\r\n                status: ConnectionStatus.ERROR,\r\n                error: `Error starting WebRTC: ${error.message}`\r\n            })\r\n        }\r\n    }\r\n\r\n    /**\r\n * Récupère la liste des périphériques audio et vidéo disponibles.\r\n * Cette méthode peut être déclenchée depuis Dash via un callback.\r\n */\r\n    async getMediaDevices() {\r\n        try {\r\n            this.logger.log('log', 'Getting available media devices...');\r\n\r\n            // Vérifier si l'API MediaDevices est disponible\r\n            if (!navigator.mediaDevices || !navigator.mediaDevices.enumerateDevices) {\r\n                throw new Error('MediaDevices API not supported in this browser');\r\n            }\r\n\r\n            // Sur certains navigateurs, il faut d'abord demander l'accès aux périphériques\r\n            // pour obtenir leurs labels (noms)\r\n            let stream = null;\r\n            try {\r\n                // Demander un accès temporaire aux périphériques\r\n                stream = await navigator.mediaDevices.getUserMedia({ audio: true, video: true });\r\n            } catch (error) {\r\n                this.logger.log('warn', 'Could not get media access to enumerate devices with labels:', error);\r\n                // On continue quand même, mais les labels seront peut-être vides\r\n            }\r\n\r\n            // Récupérer la liste des périphériques\r\n            const devices = await navigator.mediaDevices.enumerateDevices();\r\n\r\n            // Arrêter le stream temporaire s'il existe\r\n            if (stream) {\r\n                stream.getTracks().forEach(track => track.stop());\r\n            }\r\n\r\n            // Filtrer et formater les périphériques\r\n            const videoDevices = devices\r\n                .filter(device => device.kind === 'videoinput')\r\n                .map(device => ({\r\n                    deviceId: device.deviceId,\r\n                    label: device.label || `Caméra ${device.deviceId.slice(0, 8)}...`,\r\n                    groupId: device.groupId\r\n                }));\r\n\r\n            const audioDevices = devices\r\n                .filter(device => device.kind === 'audioinput')\r\n                .map(device => ({\r\n                    deviceId: device.deviceId,\r\n                    label: device.label || `Microphone ${device.deviceId.slice(0, 8)}...`,\r\n                    groupId: device.groupId\r\n                }));\r\n\r\n            // Résultat final\r\n            const result = {\r\n                videoDevices,\r\n                audioDevices\r\n            };\r\n\r\n            // Envoyer le résultat via setProps\r\n            if (this.props.setProps) {\r\n                this.props.setProps({\r\n                    availableMediaDevices: result\r\n                });\r\n            }\r\n\r\n            this.logger.log('log', 'Media devices enumerated:', result);\r\n            return result;\r\n\r\n        } catch (error) {\r\n            this.logger.log('error', 'Error enumerating media devices:', error);\r\n\r\n            // Envoyer l'erreur via setProps\r\n            if (this.props.setProps) {\r\n                this.props.setProps({\r\n                    hasError: true,\r\n                    errorMessage: `Error enumerating media devices: ${error.message}`\r\n                });\r\n            }\r\n\r\n            return {\r\n                videoDevices: [],\r\n                audioDevices: [],\r\n                error: error.message\r\n            };\r\n        }\r\n    }\r\n\r\n    stop() {\r\n        try {\r\n            // Arrêter tous les flux media\r\n            if (this.outgoingMediaStreams) {\r\n                this.outgoingMediaStreams.getTracks().forEach(track => track.stop());\r\n            }\r\n\r\n            // Arrêter la connexion\r\n            if (this.pc) {\r\n                this.pc.close();\r\n                this.pc = null;\r\n            }\r\n\r\n            // Arreter le signaling client\r\n            if (this.signalingClient) {\r\n                this.signalingClient.close();\r\n                this.signalingClient = null;\r\n            }\r\n\r\n            // Déconnecter les flux des éléments media\r\n            if (this.props.incomingMediaElementsId) {\r\n                this.disconnectStreamsToElements(this.props.incomingMediaElementsId);\r\n            }\r\n            if (this.props.outgoingMediaElementsId) {\r\n                this.disconnectStreamsToElements(this.props.outgoingMediaElementsId);\r\n            }\r\n\r\n            // Mettre à jour l'état\r\n            this.setState({\r\n                status: ConnectionStatus.CLOSED,\r\n                error: null,\r\n            });\r\n        } catch (error) {\r\n            this.logger.log('error', 'Error stopping capture:', error);\r\n\r\n            // Mettre a jour l'état avec l'erreur\r\n            this.setState({\r\n                status: ConnectionStatus.ERROR,\r\n                error: `Error stopping capture: ${error.message}`\r\n            })\r\n        }\r\n    }\r\n\r\n    // Methode de cycle de vie du composant\r\n    componentDidMount() {\r\n        // Connexion au serveur de signalisation\r\n        this.connectToSignalingServer()\r\n        \r\n        // Si autoStart est true, démarrer la capture automatiquement\r\n        if (this.props.autoStart) {\r\n            this.start();\r\n        }\r\n    }\r\n\r\n    async componentDidUpdate(prevProps, prevState) {\r\n        // Surveiller les changement de la propriété 'capture'\r\n        if (this.props.capture !== prevProps.capture) {\r\n            if (this.props.capture === true) {\r\n                this.start();\r\n            } else {\r\n                this.stop();\r\n            }\r\n        }\r\n\r\n        if (this.props.mediaDevicesConstraints !== prevProps.mediaDevicesConstraints) {\r\n            this.logger.log('log', 'Media constraints changed:', this.props.mediaDevicesConstraints);\r\n            await this.updateOutgoingMediaStreams();\r\n        }\r\n        // Surveiller la réception des messages de signalisation\r\n        if (this.props.incomingSignalingMessage !== prevProps.incomingSignalingMessage) {\r\n\r\n            // Si un message de signalisation est reçu, le traiter\r\n\r\n            if (this.props.incomingSignalingMessage !== null) {\r\n                this.logger.log('log', 'Signaling message received:', this.props.incomingSignalingMessage);\r\n                await this.handleSignalingMessage(this.props.incomingSignalingMessage);\r\n            }\r\n        }\r\n\r\n        // Lorsque l'état change, mettre à jour les props correspondantes\r\n        if (this.state.status !== prevState.status && this.props.setProps) {\r\n            this.props.setProps({\r\n                status: this.state.status\r\n            });\r\n        }\r\n\r\n        // Détecter quand refreshMediaDevices change pour déclencher l'énumération des périphériques\r\n        if (this.props.refreshMediaDevices !== prevProps.refreshMediaDevices) {\r\n            this.logger.log('log', 'Media devices refresh triggered');\r\n            this.getMediaDevices();\r\n        }\r\n\r\n        if (this.props.polite !== prevProps.polite) {\r\n            this.logger.log('log', 'Politeness mode changed:', this.props.polite);\r\n            this.polite = this.props.polite;\r\n        }\r\n\r\n        // Lorsque que l'erreur change ou apprait, mettre à joiur les props correspondantes\r\n        if (this.state.error !== prevState.error && this.props.setProps) {\r\n            this.props.setProps({\r\n                hasError: true,\r\n                errorMessage: this.state.error\r\n            });\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        // Nettoyer les ressources quand le composant est détruit\r\n        this.stop();\r\n    }\r\n\r\n    // Methode obligatoire qui retourne l'interface utilisateur du composant\r\n    render() {\r\n        return (null);\r\n    }\r\n}\r\n\r\n// Ici on définit les propriétés par défaut du composant qui seront utilisé à l'initialisation\r\nDashWebrtc.defaultProps = {\r\n    debug: false,\r\n    polite: true, // 'sender' ou 'receiver'\r\n    autoStart: false, // Démarre automatiquement ?\r\n    capture: false,\r\n    refreshMediaDevices: 0,\r\n    availableMediaDevices: null,\r\n    mediaDevicesConstraints: { audio: true, video: true },\r\n    iceServersConfig: null,\r\n    incomingMediaElementsId: null,\r\n    outgoingMediaElementsId: null,\r\n    signalingUrl: null,\r\n    signalingMaxRetries: 3,\r\n    signalingRetryInterval: 1000,\r\n};\r\n\r\nDashWebrtc.propTypes = {\r\n\r\n    // ============================== Dash Core Components ==============================\r\n\r\n    /**\r\n     * The ID used to identify this component in Dash callbacks.\r\n     */\r\n    id: PropTypes.string,\r\n\r\n    /**\r\n     * Debug mode for conditional logging.\r\n     */\r\n    debug: PropTypes.bool,\r\n\r\n    /**\r\n     * Si une erreur est survenue\r\n     */\r\n    hasError: PropTypes.bool,\r\n\r\n    /**\r\n     * Message d'erreur actuel (le cas échéant)\r\n     */\r\n    errorMessage: PropTypes.string,\r\n\r\n    /**\r\n     * Status actuel (le cas échéant)\r\n     */\r\n    status: PropTypes.string,\r\n\r\n    /**\r\n     * Dash-assigned callback that should be called to report property changes\r\n     * to Dash, to make them available for callbacks.\r\n     */\r\n    setProps: PropTypes.func,\r\n\r\n    // ============================== WebRTC Configuration ==============================\r\n\r\n    /**\r\n    * Configuration des serveurs ICE utilisés pour les connexions WebRTC.\r\n    * Permet de personnaliser les serveurs STUN/TURN pour traverser les NAT et firewalls.\r\n    * Si non fourni, une configuration par défaut avec des serveurs publics est utilisée.\r\n    */\r\n    iceServersConfig: PropTypes.shape({\r\n        iceServers: PropTypes.arrayOf(PropTypes.shape({\r\n            urls: PropTypes.oneOfType([\r\n                PropTypes.string,\r\n                PropTypes.arrayOf(PropTypes.string)\r\n            ]).isRequired,\r\n            username: PropTypes.string,\r\n            credential: PropTypes.string\r\n        })),\r\n        iceCandidatePoolSize: PropTypes.number,\r\n        iceTransportPolicy: PropTypes.oneOf(['all', 'relay'])\r\n    }),\r\n\r\n    /**\r\n    * Controle si le composant doit attendre de recevoir une offre avant d'en créer une (true, polie) ou si il peut initier une offre sans attendre (false, impolie).\r\n    */\r\n    polite: PropTypes.bool,\r\n\r\n    /**\r\n     * Contraintes de capture des médias (audio, vidéo), voir https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\r\n     * L'objet est un dictionnaire de clés (audio, video) avec des valeurs de contraintes. \r\n     * Par défault on capture seulement l'audio : { audio: true, video: false }\r\n     * Exemple :\r\n     * { audio: { echoCancellation: true, noiseSuppression: true }, video: { width: 1280, height: 720 } }\r\n     */\r\n    mediaDevicesConstraints: PropTypes.object,\r\n\r\n    /**\r\n     * Démarer automatiquement la capture\r\n     */\r\n    autoStart: PropTypes.bool,\r\n\r\n    /**\r\n     *  Contrôle l'état de capture (true = démarrer, false = arrêter)\r\n     */\r\n    capture: PropTypes.bool,\r\n\r\n    /**\r\n     * ID de l'élément audio/video HTML à connecter au flux entrant\r\n     */\r\n    incomingMediaElementsId: PropTypes.array,\r\n\r\n    /**\r\n     * ID de l'élément audio/video HTML à connecter au flux sortant\r\n     */\r\n    outgoingMediaElementsId: PropTypes.array,\r\n\r\n    // ============================== Media Devices ==============================\r\n\r\n    /**\r\n     * Propriété utilisée pour renvoyer la liste des périphériques médias disponibles.\r\n     * Déclenchée par la méthode getMediaDevices().\r\n     */\r\n    availableMediaDevices: PropTypes.object,\r\n\r\n    /**\r\n     * Déclenche l'énumération des périphériques médias.\r\n     * Incrémentez cette valeur pour lancer l'énumération.\r\n     */\r\n    refreshMediaDevices: PropTypes.number,\r\n\r\n\r\n    // ============================== Signaling WebSocket Client ==============================\r\n    /**\r\n     * URL du serveur de signalisation WebSocket.\r\n     */\r\n    signalingUrl: PropTypes.string.isRequired,\r\n\r\n    /** \r\n     * Nombre maximal de tentatives de reconnexion de la connection websocket en cas d'échec.\r\n     * @default 3\r\n     * @type {number}\r\n     */\r\n    signalingMaxRetries: PropTypes.number,\r\n\r\n    /**\r\n     * Intervalle entre les tentatives de reconnexion en millisecondes.\r\n     * @default 1000\r\n     * @type {number}\r\n     * @example\r\n     */\r\n    signalingRetryInterval: PropTypes.number,\r\n\r\n    /**\r\n     * Message d'ouverture à envoyer lors de la connexion.\r\n     * @default null\r\n     * @type {Object}\r\n     * @example\r\n     * {\r\n        \"type\": \"join\",\r\n        \"room\": \"my-room\"\r\n      }\r\n     */\r\n    signalingOpeningMessage: PropTypes.object\r\n};\r\n\r\n"],"names":["NEW","CONNECTING","CONNECTED","FAILED","CLOSED","logger","componentName","debugMode","arguments","length","undefined","log","level","message","data","logFn","console","prefix","concat","Date","toISOString","slice","doLog","_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","stop","rval","handle","complete","finish","delegateYield","asyncGeneratorStep","_asyncToGenerator","apply","_next","_throw","_defineProperties","_toPropertyKey","key","toPrimitive","String","_toPrimitive","SignalingWsClient","url","maxRetries","retryInterval","openingMessage","_classCallCheck","this","ws","connectionStatus","onMessage","onConnectionStatusChange","_connect","_callee2","retries","_attemptConnection","_this","_context2","attemptConnection","_ref","_callee","_context","reject","WebSocket","onopen","send","_setupEventListeners","onerror","error","setTimeout","readyState","OPEN","close","t0","_this2","onmessage","event","JSON","parse","onclose","stringify","_isNativeReflectConstruct","Boolean","valueOf","Reflect","construct","_getPrototypeOf","bind","_setPrototypeOf","DashWebrtc","_Component","props","ReferenceError","_assertThisInitialized","_possibleConstructorReturn","_callSuper","iceConfig","iceServersConfig","iceServers","urls","username","credential","iceCandidatePoolSize","iceTransportPolicy","pc","RTCPeerConnection","onicecandidate","handleIceCandidate","onconnectionstatechange","handleConnectionStateChange","onnegotiationneeded","handleNegotiationNeeded","ontrack","handleAddTrack","onicegatheringstatechange","handleIceGatheringStateChange","signalingClient","signalingUrl","signalingServerProtocols","debug","signalingServerMaxRetries","signalingServerRetryInterval","signalingServerOpeningMessage","handleSignalingConnectionStatusChange","handleSignalingMessage","state","status","ConnectionStatus","incomingMediaStreams","Map","outgoingMediaStreams","makingOffer","ignoreIncomingOffer","isSettingRemoteAnswerPending","polite","_inherits","_handleSignalingMessage","description","candidate","role","readyForOffer","offerCollision","signalingState","setRemoteDescription","setLocalDescription","localDescription","addIceCandidate","t1","setState","ERROR","_x","connectionState","_handleNegotiationNeeded","_x2","iceGatheringState","track","streams","id","kind","getTracks","onunmute","connectStreamsToElements","incomingMediaElementsId","mediaStream","elementsId","_this3","audioTracks","getAudioTracks","videoTracks","getVideoTracks","elementIndex","set","MediaStream","get","addTrack","isFirst","size","index","document","getElementById","srcObject","_this4","mediaElement","pause","constraints","mediaDevicesConstraints","audio","video","_updateOutgoingMediaStreams","_callee3","_this$outgoingMediaSt","newStream","previousTracks","newVideoTracks","newAudioTracks","senders","replacedVideoTracks","replacedAudioTracks","_iterator","_step","sender","unusedTrack","_unusedTrack","_iterator2","_step2","_iterator3","_step3","_track","_iterator4","_step4","_context3","validateContraints","navigator","mediaDevices","getUserMedia","getSenders","_createForOfIteratorHelper","find","includes","replaceTrack","err","outgoingMediaElementsId","_addMediaTracksToPeerConnection","_callee4","_iterator5","_step5","_context4","_connectToSignalingServer","_callee5","_context5","connect","_start","_callee6","_context6","addMediaTracksToPeerConnection","_getMediaDevices","_callee7","stream","devices","videoDevices","audioDevices","result","_context7","enumerateDevices","filter","device","map","deviceId","label","groupId","setProps","availableMediaDevices","hasError","errorMessage","disconnectStreamsToElements","connectToSignalingServer","autoStart","start","_componentDidUpdate","_callee8","prevProps","prevState","_context8","capture","updateOutgoingMediaStreams","incomingSignalingMessage","refreshMediaDevices","getMediaDevices","_x3","_x4","Component","defaultProps","signalingMaxRetries","signalingRetryInterval","propTypes","PropTypes","isRequired","signalingOpeningMessage"],"sourceRoot":""}